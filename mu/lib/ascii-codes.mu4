comment ACK-ACK

Currently eliding codes 0x20 (space) and 0x7f (delete) because they
aren't visible per se, only their effects are seeen.

NB: No, you technically don't need these, as you can use char:

     char A  Ok (hex)
      1 =>                41
     char +  Ok (hex)
      2 =>                2b
     char 8  Ok (hex)
      1 =>                38

... if you just want to know individual ascii codes for a character. We
found however that sometimes char doesn't cut it and you just want a
quick reference to either all or a set. Or maybe ... char does cut it
and you could use it to rewrite the definitions below:

: ascii-upper-case char A cr 20 0 do dup dup emit space . cr 1 + loop cr ; 

It depends on which angle you were working from: translating from ascii 
codes to characters, or vice versa.  Take your pick.  We were in codes to
characters mode at the time.

ACK-ACK

hex

: ascii-upper-case cr cr ." 41 = " 41 dup emit cr 19 0 do 1 + dup dup . ." = "  emit cr loop drop cr ;
: ascii-lower-case cr cr ." 61 = " 61 dup emit cr 19 0 do 1 + dup dup . ." = "  emit cr loop drop cr ;
: ascii-nums       cr cr ." 30 = " 30 dup emit cr  9 0 do 1 + dup dup . ." = "  emit cr loop drop cr ;

: ascii-special    cr cr ." 21 = " 21 dup emit cr  e 0 do 1 + dup dup . ." = "  emit cr loop drop 
                         ." 3a = " 3a dup emit cr  6 0 do 1 + dup dup . ." = "  emit cr loop drop 
                         ." 5b = " 5b dup emit cr  5 0 do 1 + dup dup . ." = "  emit cr loop drop 
                         ." 7b = " 7b dup emit cr  3 0 do 1 + dup dup . ." = "  emit cr loop drop cr ;

: ascii-printable  cr cr ." 21 = " 21 dup emit cr 5d 0 do 1 + dup dup . ." = "  emit cr loop drop cr ;

( sugar )
: au ascii-upper-case ;
: al ascii-lower-case ;
: an ascii-nums ;
: as ascii-special ;
: ap ascii-printable ;
