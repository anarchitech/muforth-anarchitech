( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2022 David Frech. (Read the LICENSE for details.)

loading Serial expect/send

( Simple target serial expect/send code.)

( set-termios-target-raw sets timeout to forever!)
: target-raw  ( fd)  ( This is tailored for target interaction)
    dup  here get-termios  drop
         here set-termios-target-raw
  ( fd)  here set-termios  ( set to raw!) ;

defer target-tty

: lazy-target-tty  ( - fd)
   create  0 , ( fd)  token, drop ( filename)  does>
   dup @  =if nip ^ then ( already opened!)  drop
   dup cell+ addr+ ( skip fd and string count)  open-file-rw  ( a fd)
   dup rot ( fd fd a)  !  dup target-raw  ( fd) ;

( serial-target and serial-target2 should be symlinks to
  /dev/tty<something> devices)

lazy-target-tty  std-target-tty serial-target
lazy-target-tty  alt-target-tty serial-target2

( Abbrevs)
: std-target   now std-target-tty is target-tty ;  std-target
: alt-target   now alt-target-tty is target-tty ;

( We want to have several easy-to-use words that read, modify, and
  write back target-tty's termios, so let's make that easy.)

: using-target-tty
   target-tty here get-termios drop
              here pop addr@ execute  ( execute the following word)
   target-tty here set-termios ;

: bps   ( speed)    using-target-tty  set-termios-speed          ;
: ignore-parity     using-target-tty  set-termios-ignore-parity  ;
: even-parity       using-target-tty  set-termios-even-parity    ;
: odd-parity        using-target-tty  set-termios-odd-parity     ;

( Set serial timeout in seconds; 0 sets no timeout.)
: serial-timeout    using-target-tty  set-termios-timeout        ;


( Recv from, send to target.)
: _send  target-tty  >emit ;
: _recv  target-tty  <key ;

( flush throws away bytes in the input queue; drain waits until all bytes
  in the output queue have been transmitted.)

: flush  target-tty  tty-iflush ;
: drain  target-tty  tty-drain ;

: icount  ( - chars-waiting)  target-tty  tty-icount ;

( Spying on the protocol.)
variable spy  spy off
: send          spy @ if ." >"  dup .h8_ then  _send ;
: recv   _recv  spy @ if ." <"  dup .h8_ then ;

( Wait for target command loop to announce itself, and compare to what we
  expect.)

: await  ( a u)
   m preserve
   swap m !  for  m* recv  xor if  error" Wrong firmware"  then  next ;
