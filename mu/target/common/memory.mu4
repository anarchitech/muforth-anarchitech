( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

-- loading Memory image (generic)

( NOTE: Before loading this code, define the following values that
  describe the target:

    cell-bytes  -- number of bytes in a cell
    addr-bits   -- number of bits in an address
    big-endian or little-endian  -- target's endianness

  Additionally, if the target is a Harvard architecture machine, the symbol
  "harvard" should be defined.

  *After* loading this code, the deferred word "choose-image" [see below]
  must be set to code specific to the target machine and its architecture.)

ld target/common/endian.mu4   ( why not just do this in one place, ie, here?)

: power-of-two?  ( n)
   begin  dup 1 and 0=  while  u2/  repeat  1 = ;

( Memory images are prefixed by their current pointer, origin, and size in
  bytes.)

variable h    ( dictionary pointer pointer; points to current image)
: dp   h @ ;  ( dictionary pointer)

: make-image  ( origin #bytes)
   dup power-of-two?  0= if  error" image size not a power of 2"  then
   create  swap  dup , , ( ptr origin)  dup , ( size)   allot
   does>  h ! ;

-: ( tell us which image is current)
   ."  ("  dp  body> >name type  ." )" ;  is .extra-prompt

( Simple but inefficient!)
: @image  dp  cell+ @         ( origin) ;
: #image  dp  cell+ cell+ @   ( image size) ;
: 'image  dp  [ 3 cells #] +  ( image address) ;

( Target can be a von Neumann or Harvard architecture machine, so we let
  the user decide how to handle choosing an image based on a target
  address.

  On a von Neumann machine we have multiple images, but we assume that they
  exist in a single address space. Given a target address, choose-image will
  figure out which image it resides in and set that as the current image.

  On a Harvard machine we can have multiple addresss spaces that contain
  the same addresses, so there is no way to choose an image based on the
  target address. In this case, choose-image will probably do nothing, and
  the user has to choose the image that they are interested in.)

defer choose-image
: image+  ( target - host)  choose-image  #image 1- and  'image + ;

: image-c@   image+ c@ ;
: image-c!   image+ c! ;

( After each definition of image-@ we use ' to leave on the stack the
  address of the correct word for du to use for that target.)

.ifdef little-endian
   cell-bytes 4 = .if  ( 32-bit target)
      : image-h@   image+ leh@ ;
      : image-h!   image+ leh! ;

      : image-@    image+ lew@ ;  ' lew@
      : image-!    image+ lew! ;
   .else cell-bytes 2 = .if  ( 8- or 16-bit target)
      : image-@    image+ leh@ ;  ' leh@
      : image-!    image+ leh! ;
   .then .then

.else .ifdef big-endian
   cell-bytes 4 = .if  ( 32-bit target)
      : image-h@   image+ beh@ ;
      : image-h!   image+ beh! ;

      : image-@    image+ bew@ ;  ' bew@
      : image-!    image+ bew! ;
   .else cell-bytes 2 = .if  ( 8- or 16-bit target)
      : image-@    image+ beh@ ;  ' beh@
      : image-!    image+ beh! ;
   .then .then

.else  error" You must define big-endian or little-endian."

.then .then

( The above mess left the address of a "cell@" word on the stack.)
: du-target
   [ #]    is |cell@
   addr-bits  |addr !
   cell-bytes |cell ! ;

-: ( buf a u)  swap image+ -rot  cmove ;  ( read from image)
: >image
   [ #]    is |read
   du-target ;

>image  ( default to image; this can change once we are chatting with target.)

meta
cell-bytes constant cell
: cells  \m cell * ;
: cell/  \m cell / ;
: cell+  \m cell + ;
: cell-  \m cell - ;

: here   ( - a)  dp @ ;
: goto   ( a)    dp ! ;   ( set region pointer to a)
: allot  ( n)    dp +! ;

: c,    ( ch)   \m here image-c!       1 \m allot ;
: ,     ( w)    ( \m align)   \m here image-!  \m cell \m allot ;

forth
( Align an offset to an arbitrary power-of-2 alignment.)
: aligned-by  ( offset alignment - offset')  push  r@ 1- +  pop negate and ;
: mask-align,  ( b mask)  \m here  negate and  for  dup \m c,  next  drop ;

meta
: aligned         \m cell    aligned-by ;  ( cell aligned)
: align,    ( b)  \m cell 1- mask-align, ;
: align       0   \m align, ;

cell-bytes 4 = .if  ( only define "halfword" words for 32-bit targets)

: haligned                 2 aligned-by ;  ( halfword aligned)
: halign,   ( b)           1 mask-align, ;
: halign      0   \m halign, ;
: h,    ( h)    ( \m halign)  \m here image-h!       2 \m allot ;

.then

forth
( Return the start address and number of bytes in current region.)
: region   ( - a u)       dp 2@  ( start end)  over - ;

( Set both pointer [end] and origin [start] to the same value.)
: region!  ( start)   dup dp 2! ;
