( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

loading RP2040 PICOBOOT support

( C header files describing the structures are here:
  https://github.com/raspberrypi/pico-sdk/tree/master/src/common/boot_picoboot/include/boot/picoboot.h)

hex

2e8a 0003 usb-find-device  .if  constant picoboot  .else
   ." No PICOBOOT devices found."
.then

.ifdef picoboot

( NOTE: We are not supposed to hardwire the endpoint numbers here, but I'm
  going to do it anyway so we can get this code working ASAP. ;-)

.ifdef usb-read-pipe  ( Linux and OSX)

( These are for executing commands over the two bulk endpoints.)
: uwrite  ( buf len)   3  picoboot  usb-write-pipe ;
: uread   ( buf len)   4  picoboot  usb-read-pipe  drop ;

.else  ( ndef usb-read-pipe: BSD system)

( Try shooting in the dark. The user can also tweak these by reading the
  output of

    usbdevs -d
)

z" /dev/ugen0.03" open-file-wo  constant picoboot-write
z" /dev/ugen0.04" open-file-ro  constant picoboot-read

( These are for executing commands over the two bulk endpoints.)
: uwrite  ( buf len )   picoboot-write  usb-write ;
: uread   ( buf len )   picoboot-read   usb-read  drop ;

.then

( This is for resetting the PICOBOOT interface. Again, we are hardwiring
  this for now. The Mass Storage device is interface 0; PICOBOOT is
  interface 1.)

: picoboot.reset   41 41 0 1 0 pad picoboot  usb-control  drop ;


#32 buffer cmdbuf
variable bp  ( buf pointer)
: >b  ( b)   bp @  c!+  bp ! ;
: >h  ( h)   >hilo  >b >b ;  ( little-endian)
: >w  ( w)   >3210  >b >b >b >b ;  ( little-endian)

variable spy  ( whether to spy on the protocol)
: .b     m*                  .h8_ ;
: .w     m* m* m* m*  0123>  .h32 space ;
: ?spy
   radix preserve
   spy @ if
      cr  cmdbuf 8 +  m !  ( skip magic and token)
      .b ( cmd)
      7 m +!  ( skip to command bytes)  .w ( addr?)  .w ( #bytes?)
   then ;

( NOTE: For now we are using a token that is always 0. It would be better
  if it was an increasing integer. We can try this later.)

: <pico  ( #transfer-bytes #cmd-bytes cmd)
   cmdbuf bp !
   431f_d10b >w  0 >w ( token)  >b ( cmd)  >b ( #cmd-bytes)
   0 >h ( reserved)  >w ( #transfer-bytes) ;

: pico>  ( pad buffer with zeros)
   ?spy
   [ cmdbuf #32 + #]  bp @ -  for  0 >b  next
   cmdbuf #32 uwrite ;

( Transferring data.)
: ack>   pad 1 uread ;
: ack<   pad 1 uwrite ;


( PICOBOOT commands.)

( Important NOTES about the following commands.

  bExclusive: 0 = allow mass storage;
              1 = no mass storage;
              2 = eject mass storage

  When erasing the Flash, addr is a 4 Ki aligned sector address, and size
  is 4 Ki aligned count of bytes to erase.

  When reading from or writing to Flash, addr and size must be 256-byte
  aligned.
)

: picoboot.exclusive  ( bExclusive)    0 1 01  <pico  >b                          pico>  ack> ;
: picoboot.erase      ( size addr)     0 8 03  <pico  ( addr) >w  ( size) >w      pico>  ack> ;
: picoboot.read   ( buf size addr)  over 8 84  <pico  ( addr) >w  ( size) dup >w  pico>  uread   ack< ;
: picoboot.write  ( buf size addr)  over 8 05  <pico  ( addr) >w  ( size) dup >w  pico>  uwrite  ack> ;
: picoboot.exit-xip                    0 0 06  <pico                              pico>  ack> ;
: picoboot.enter-xip                   0 0 07  <pico                              pico>  ack> ;
: picoboot.exec            ( addr)     0 4 08  <pico  1+ ( addr+thumb) >w         pico>  ack> ;


variable rom-func-table
variable rom-data-table
variable rom-table-lookup

: h@+  ( a - h a+2)  c@+ c@+  push  lohi>  pop ;

( These are the commands required by the chat/debug interface.)
: pi.version
   pad 4 0010 picoboot.read  pad lew@
   dup  00ff_ffff and  0001754d ( "Mu" 01) =  if
      #24 u>>  cr ." PICOBOOT v" u.
      pad 6 0014 picoboot.read
      pad h@+ h@+ h@+ drop
      rom-table-lookup !  rom-data-table !  rom-func-table !  ^  then
   drop  ." Hmm. No version found in the ROM." ;

: pi.hello   ( - chunk-size)
   picoboot.reset
   picoboot.exit-xip  ( needed if we want to read the flash!)
   pi.version
   #256 ;  ( so we get correct alignment for reading and writing flash)

h @  ram
\m here  constant pico-sp  0 \m ,
__meta

label read-4-words
   { w x y z } top ldm   3 cells # rp rp sub   { x y z } rp stm   w top mov   lr bx  ;c


( This starts executing with a small stack in USB ram. We push the LR that
  will get us back to PICOBOOT, and then immediately switch to a stack set
  up by the host, and once that is done, we save the PICOBOOT sp back into
  the same slot.)

label execute-assembly
   { lr } push
   pico-sp w lit   0 w +) x ldr  ( load forth sp)
   sp y mov        0 w +) y str  ( save picoboot sp)
   x sp mov
   { top w } pop   sp rp mov   w sp mov   dsb   isb   top blx
   rp sp mov
   { top } push
   pico-sp w lit   0 w +) y ldr  ( restore picoboot sp)
        sp x mov   0 w +) x str  ( save forth sp)
   y sp mov
   { pc } pop  ;c
   pool,


align  ( make sure RAM region is word-aligned)
__host
h !

: pi.get-status   ( - sp pc)
   pad 4 pico-sp picoboot.read  pad lew@  "deadbeef ;

: pi.run      ( pc sp)
   pad lew!  pad 4 pico-sp picoboot.write
   picoboot.exec ;

: pi.read     ( buf a u)  swap  picoboot.read ;
: pi.write    ( buf a u)  swap  picoboot.write ;

: pi.erase    ( a)   4 Ki swap  picoboot.erase ;
: pi.flash    ( buf a u)  swap  picoboot.write ;

: pico
   chat-via  pi.hello  pi.get-status  pi.run  pi.read  pi.write  pi.erase  pi.flash ;

.then  ( ifdef picoboot)
