( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2022 David Frech. (Read the LICENSE for details.)

loading STM32F072xB example startup code

( Create a flash image containing a vector table, the ITC Forth kernel, and
  some basic startup code.)

__meta
hex

flash
0 vector-table flash-vectors ( lay down a vector table, using end of ram as initial SP)
flash-vectors

.ifdef isr-debug  ( to debug handlers in ram)
ram-vectors  @vectors @  ( get ram table origin)
flash-vectors  ( make it current table)

( This was an interesting experiment, but mapping the RAM to 0000_0000 is a
  better way to test and use RAM-resident handlers. (See SYSCFG_CFGR1 in
  the user manual for the details.)

default-handler
   IPSR w mrs ( move sys to reg) ( get exception number)
   2 # w w lsls ( convert to offset)
   ( ram table origin) x lit   x w w adds   0 w +) x ldr   x bx  ;c
   pool,
.then

ld target/ARM/v6-m/kernel-itc.mu4

( Even though the documentation gives conflicting messages - the schematic
  says that it's connected, but the user manual says that it isn't - it
  seems that the 8 MHz clock from the ST-LINK is *not* in fact routed to the
  OSC_IN pin on the F072.

  Instead, the F072 has a 48 MHz HSI - high speed internal - clock that can
  synchronize with the frame fields from USB, so it can be used as a
  crystal-less clock source, even for USB applications. We will use this as
  our system clock.)

: wait-for-rdy  ( regaddr)
   begin  dup c@  2 and  until  ( wait for RDY bit)  drop ;

: clock-init
   1 ( latency) FLASH_ACR set!  ( we need one cycle for 48 MHz clock!)
   1 ( HSI48ON) [ RCC_CR2 2 + #] tuck c!  wait-for-rdy ( wait for HSI48RDY)
   3 ( SW=HSI48 as sysclk)  RCC_CFGR tuck c!
   begin  dup c@ %1111 =  until  ( SW=HSI48 and SWS=HSI48)  drop ;

: wait   for next ;
: flash-leds
   -- Turn on clock to Port C
   ( Ports -FED_CBA- )
        [ %0000_1000  #16 << #] RCC_AHBENR set!
   -- Make PC6 to PC9 outputs
   [ %01010101 #12 << #] GPIOC_MODER set!
   -- Flash!
   %11_1100_0000 dup GPIOC_BSRR !  2_0000 wait  GPIOC_BRR ! ;

here ]  ( chip-init)
   clock-init  flash-leds  begin again  [

Reset_exc handler
   -- Startup code!
   -- Since we have a Forth kernel, let's write the startup code in Forth!
   sp rp mov   #64 cells # sp sp sub  ( RP at end of flash; SP below)
   ( chip-init)  ip  lit
   "decafbad     top lit
   next  ;c
   pool,

HardFault_exc handler
   here b  ;c  ( hang)

( This will be the default handler if isr-debug is not defined.)
NMI_exc handler
default-handler
   lr bx  ;c  ( return to sender!!)

( NOTES about the F072-Discovery board.)

( LEDs are attached to PC6 to PC9.

  Port Led Dir  Color
-----------------------------
  PC6  LD3  N   red
  PC7  LD6  S   blue
  PC8  LD4  W   orange
  PC9  LD5  E   green
)
