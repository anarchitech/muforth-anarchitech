( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

loading Atmel SPI flash programming (host)

( This is the host-side code to drive
  target/ARM/stm32/atmel-spi-programming-core.mu4)

( We need to talk to the ST-LINK. Load a stripped-down version of the
  support code.)

-d stlink-ram-only
ld target/ARM/debug/stlink-v2.mu4

( We need to know where to find the data structures in the STM32 memory.
  They are conveniently placed at the start of RAM. We are going to call
  directly into the stlink support code to read and write the STM32 memory.
  We can't use the "interact" versions - t.read, t.write, etc - because they
  will be associated with the 8051 target!)

hex

2000_0000  ( STM32 ram origin)
dup constant data      #64 +  ( flash page data buffer)
dup constant semaphore   4 +  ( semaphore + stm32 command)
    constant cmd              ( flash command)
           ( addr             ( flash addr: high byte, low byte)
           ( count            ( byte count to transfer)
           ( toggle           ( flash command toggle - for AVR)

( Remote execute command.)
: rx-cmd  ( cmd)
   deca_f000 + pad lew!  pad semaphore 4 st.write  ( write to STM32 memory)
   ( Keep reading semaphore until STM32 signals that it is done.)
   begin  pad semaphore 4 st.read  pad lew@ face_d000 = until ;

( A few basic commands. None of these have any data associated with them.
  Mostly the STM32 just needs to change a setting or drive a GPIO high or
  low.)

: spi.+reset         10 rx-cmd ;
: spi.-reset         11 rx-cmd ;

: spi.slow-clock     12 rx-cmd ;
: spi.medium-clock   13 rx-cmd ;
: spi.fast-clock     14 rx-cmd ;

( There are three sets of three commands in the STM32 firmware, one set per
  family. In each family the three commands, in order, are:
  single  bulk-read  bulk-write.)

variable family  ( avr, at89-ss, at89)
: rx-family-cmd  family @ +  rx-cmd ;

: avr-family      15 family ! ;
: at89-ss-family  18 family ! ;
: at89-family     1b family ! ;

variable spy  ( to spy on the protocol)
: spy-write  ( buf count)
   spy @ if  cr  for  c@+ swap  ." >".h8_  next  drop ^  then  2drop ;

: spy-read   ( buf count)
   spy @ if  cr  for  c@+ swap  ." <".h8_  next  drop ^  then  2drop ;

( Copy cmd, addr, count, and toggle into pad, and copy to STM32.)
: setup-bulk-cmd  ( spi-cmd addr toggle count)
   2push  pad m !
   swap m& ( cmd)  >lohi m& m& ( addr)
   pop m& ( count)  pop m& ( toggle)
   ( Copy cmd buffer to STM32.)  pad cmd 5 st.write  pad 5 spy-write ;

( Setup a single cmd, execute it, and read back the result.)
: single-cmd  ( spi-cmd addr)
   0 0  setup-bulk-cmd  0 ( single) rx-family-cmd
   ( Read result from STM32.)  pad cmd 4 st.read  pad 4 spy-read ;

( Testing)
: st@  ( a - w)  ( read a word of memory via ST-LINK)
   pad swap 4 st.read  pad lew@ ;
