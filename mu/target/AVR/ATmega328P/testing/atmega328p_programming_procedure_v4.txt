UPDATE, V4: 01-17-24

This is a major revision, as the majority of hand massaging of various
files and flag gymnastics has been completely eliminated.  Potentially
there is only one file you need to change, and only one additional
script you need to run ... and only if you running this on OpenBSD.

------------------------ Preliminaries ---------------------------

THESE APPLY ONLY TO OPENBSD.

1) IF you are running OpenBSD and likely one of the other BSD's you'll
need to change target/ARM/debug/stlink-v2.mu4 line 44 and aim it at
*your* correct ugen.  On OpenBSD 7.4 -current as of this writing on a
Thinkpad Carbon X1, that is ugen3:

 42
 43 .ifdef stlink-v2-1
 44    z" /dev/ugen3.01" open-file-rw  dup constant stlink-read
 45                                        constant stlink-write

OOTB muforth picks ugen0.01 as a default for this, which brings us to
step 2: 

2) IF you are running OpenBSD note which ugen number your device
enumerates as when you plug it in and run the ugenme script which you
will find in target/common/scripts along with a session end script,
ugenr. Run ugenr when you are  finished to ensure you are  running a Theo 
approved and correctly configured usb system. ;)

------------ STAGE 1: Setting up the stm32f303 board ------------------

$ ./muforth -d f3-disco -f target/AVR/load-stm32-discovery.mu4
Copyright (c) 2002-2023 David Frech (read the LICENSE for details)

Type 'settings' to see a few of muforth's tweakable behaviours.

(( STM32F3 Discovery board
(( STM32F303xC chip
(( STM32F303xC equates ))
(( ARM Cortex-M4 processor
(( ARM Cortex-M core equates (v6-M and v7-M) ))
(( Core target compiler (chains and token consumers) ))
(( ARM v6-M memory image ))
(( Reading Motorola S-record (S19) files ))
(( Intel hex file support (reading and writing) h* again.  hh* again.
))
(( UF2 file format ))
(( ARM v6-M Thumb2 disassembler ))
(( ARM v7-M Thumb2 disassembler L@ again.  ))
(( ARM v6-M Thumb2 assembler 4# again.  00r again.  i8 again.  sh-imm
again.  ))
(( ARM v7-M Thumb2 assembler ))
(( ARM Cortex-M3/M4 bit banding support ))
(( ARM v6-M meta-compiler (main) ; again.  ))
(( ARM v6-M interaction dumps again.  ))
(( Core flash programming )) )) ))
(( ST-LINK debug ST-LINK/V2-1 h* again.
(( STM32 flash programming code )) )) ))
(( Atmel SPI flash programming (STM32 core)
(( ARM v6-M Forth kernel (ITC) regs>mask again.  dpop2 again.  dpop3
again.  rpush2 again.  rpop2 again.  ))
(( STM32 clock setting ))
(( STM32 Bitbanged SPI (full-duplex) )) ))
ST-LINK/V2-1 JTAG v37
Mass mode => Debug mode
      IX        SP        RP        IP
00000000  20009f00  00000000  00000000*
STM32 firmware is running.
$

DO NOT UNPLUG THE BOARD!

-------- STAGE 2: Programming ------------------------

Words you execute at the command line are noted with <===!


$ ./muforth -f target/AVR/load-chat-serial.mu4
muforth/64 (e3f058f5) 2024-jan-13 06:31
(https://muforth.nimblemachines.com/)
Copyright (c) 2002-2023 David Frech (read the LICENSE for details)

Type 'settings' to see a few of muforth's tweakable behaviours.

(( AVR meta-compiler (chains) ))
(( AVR device support: atmega328 ))
(( Serial expect/send ))
(( Intel hex file support (reading and writing) ))
(( AVR memory ))
(( AVR assembler ))
(( AVR disassembler .r again.  Rd again.  Rs again.  K8 again.  ))
(( AVR meta-compiler (main) ))
(( AVR interaction .r again.  copy-ram again.  hi again.  du again.  ))
(( ST-LINK debug ST-LINK/V2-1 h* again.  spy again.  ))
(( Atmel SPI flash programming (host) spy again.  ))
(( AVR I2C chat (host) via STM32 >b again.  >w again.  b> again.  w>
again.  cmd again.  ))
(( AVR programming over SPI ))
(( AVR flash programming
(( Core flash programming verify-region again.  )) ))
(( AVR serial chat (host) >b again.  b> again.  >w again.  w> again.  ))
(( AVR fuse byte generator Fuse bytes: ff d6 e2  Lock byte: ef ))
(( AVR tasks (simple) ))
(( AVR serial (uart) chat (core)
(( AVR EEPROM reading and writing ))
(( AVR flash self-programming support )) ))
(( AVR heartbeat (software PWM) ))
(( AVR debounced buttons example ))

factory-fresh  <===!

ST-LINK/V2-1 JTAG v37
Debug mode  Ok (meta) (hex) (flash)

spi-prog    <===!

Warning: You should commit your changes *before* programming the flash
if you want the signature to reference the correct commits!

ST-LINK/V2-1 JTAG v37
Debug mode
Writing fuses
ST-LINK/V2-1 JTAG v37
Debug mode
Writing application
   page 0
   page 80
   page 100
   page 180
   page 200
Writing bootloader
   page 7e00
   page 7e80
   page 7f00
   page 7f80
Writing eeprom...................
Writing lock bits Ok (meta) (hex) (flash)

spi-verify  <===!

ST-LINK/V2-1 JTAG v37
Debug mode
Verifying fuses
ST-LINK/V2-1 JTAG v37
Debug mode
Verifying application .....
Verifying bootloader ....
Verifying eeprom .
Verifying lock bits  Ok (meta) (hex) (flash)

^C (or type bye)

You can now unplug the disco board and disconnect from your breadboard
setup and connect whatever you're using to chat with the target over
pins 2 & 3 (rx,tx)

----------------- STAGE 3: Chatting via UART ---------------------

We chat with the target via the onboard UART on pins 2 (rx) and 3 (tx).  

$ ./muforth -f target/AVR/load-chat-serial.mu4
muforth/64 (e3f058f5) 2024-jan-13 06:31
(https://muforth.nimblemachines.com/)
Copyright (c) 2002-2023 David Frech (read the LICENSE for details)

Type 'settings' to see a few of muforth's tweakable behaviours.

(( AVR meta-compiler (chains) ))
(( AVR device support: atmega328 ))
(( Serial expect/send ))
(( Intel hex file support (reading and writing) ))
(( AVR memory ))
(( AVR assembler ))
(( AVR disassembler .r again.  Rd again.  Rs again.  K8 again.  ))
(( AVR meta-compiler (main) ))
(( AVR interaction .r again.  copy-ram again.  hi again.  du again.  ))
(( ST-LINK debug Warning: No ST-LINK devices found. ))
(( AVR programming over SPI ))
(( AVR flash programming
(( Core flash programming )) ))
(( AVR serial chat (host) ))
(( AVR fuse byte generator Fuse bytes: ff d6 e2  Lock byte: ef ))
(( AVR tasks (simple) ))
(( AVR serial (uart) chat (core)
(( AVR EEPROM reading and writing ))
(( AVR flash self-programming support )) ))
(( AVR heartbeat (software PWM) ))
(( AVR debounced buttons example ))
chat
Chat firmware version e3f058f5
ITHS_VNZC    SP    PC
0000_0000  08fc  0000   Ok (meta) (hex) (flash)

