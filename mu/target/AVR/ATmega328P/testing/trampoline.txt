#################################################
Fri Jan 19 15:44:37 PST 2024
OpenBSD 7.4
GENERIC.MP#1611
dgs@cthulhu
#################################################

commit 6928fcc0289b618b8b7164111656f7b78016e8bf fixed everything and
*now* we're at a useful spot.  *Now* you can reprogram the target using
the v4 procedure and start serial chatting.

UPDATE!: You'll need to reflash the target if you run -d testing!
Reflashing section added 01-28-24.

Example test:

$ ./muforth -d testing -f target/AVR/load-chat-serial.mu4
...
(( AVR register context trampoline ))
(( AVR register context example code ))
chat
Chat firmware version 34c6ed23
verify 2 42 bc be c0 c2 c4 e4 e8 108 10a 10c 10e 110 112 114 116 118 11a
11c 11e 120 122 124 126 128 12a 12c 12e 130 132 134 136 138 13a 13c 13e
142 144 146 148 14a 14c 14e 150 152 154 156 158 15a 15c 160 166 168 16a
16c 16e 170 172 174 176 178 17a 17c 17e 180 182 184 186 188 18a 18c 18e
192 194 196 198 19a 19c 19e 1a0 1a2 1a4 1a6 1a8 1aa 1ac 1ae 1b0 1b2 1b4
1b6 1b8 1ba 1bc 1be 1c0 1c2 1c4 1c6 1c8 1ca 1cc 1ce 1d0 1d2 1d4 1d6 1d8
1da 1dc 1de 1e0 1e2 1e4 1e6 1e8 1ea 1ec 1ee 1f0 1f2 1f4 1f6 1f8 1fa 1fc
1fe 200 202 204 206 208 20a 20c 20e 210 212 214 216 218 21a 21c 21e 220
222 224 226 228 22a 22c 22e 230 232 234 236 23a 23c 23e 240 242 244 246
248 24a 24c 24e 250 252 254 256 258 25a 25e 260 262 266 268 26a 26c 26e
270 272 274 276 278 27a 27c 27e 280 282 284 286 288 28a 28c 28e 290 292
294 296 298 29a 29c 29e 2a0 2a2 2a4 2a6 2a8 2aa 2ac 2ae 2b0 2b2 2b4  Ok
(meta) (hex) (flash)
flash-image
   erase   0
   program 0 80
   erase   80
   program 80 80
   erase   100
   program 100 80
   erase   180
   program 180 80
   erase   200
   program 200 80
   erase   280
   program 280 36  Ok (meta) (hex) (flash)
verify  Ok (meta) (hex) (flash)
chat
Chat firmware version 34c6ed23
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  7f00  0000   Ok (meta) (hex) (flash)
xx1
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  c0de  022a   Ok (meta) (hex) (flash)
xx2
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  d0d0  023c   Ok (meta) (hex) (flash)
xx3
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  beef  0246   Ok (meta) (hex) (flash)
7fc w!  Ok (meta) (hex) (flash)
@ rx
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  cafe  0000  07fe  07f4  01fc   Ok (meta) (hex) (flash)

In the example session above we run three pieces of test code: xx1, xx2
and xx3.  Set the git log message for the commit above; SP is now the Z
register ... and yes it's ok that it doesn't match Z in the register
output above because of how it's being used.  READ THAT COMMIT MESSAGE!

Note the SP and PC values after each execution.  You can find the code
for xx1 etc in target/AVR/register-trampoline.mu4

Our final "proof" test is to write the address 7fc to the w register and
fetch the result ... we're asking "what's at this address?" ... but we
already know: it *should* return the value 0xcafe and in fact it *does*.

---------------------------------------------------------------------

Next, let's check out one of the examples in
target/AVR/register-examples.mu4. Scroll down to lines 22-23:

      ( Add w + x, store in w)
      label +     xl wl add  xh wh adc  ret  ;c
  
Let's test it (breaking up the output, comments inline):


ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  7f00  0000   Ok (meta) (hex) (flash)


We'll utilize 7fc (address) but let's decrement it first by a random
value; we'll plug those values into W and X:


7fc 2ed -  Ok (meta) (hex) (flash)
 1 =>               50f  <-- result of decrementing by 0x2ed; RPN!


w!  Ok (meta) (hex) (flash) <-- store that value in w
2ed x!  Ok (meta) (hex) (flash) <-- store 0x2ed in x


.regs <--- examine the registers, yep there they are:
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  050f  02ed  0000  7f00  0000   Ok (meta) (hex) (flash)


+ rx  <--- w + x and we get a register display immediately.  Note w.
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  07fc  02ed  0000  07f4  01fc   Ok (meta) (hex) (flash)


@ rx <--- fetch the value stored at the address in w
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  cafe  02ed  07fe  07f4  01fc   Ok (meta) (hex) (flash)


w@  Ok (meta) (hex) (flash) <--- grab that value out of w store on the
                                 stack
 1 =>              cafe


.regs <--- run regs, note that the address remains in w; w@ is 
           non-destructive.


ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  cafe  02ed  07fe  07f4  01fc   Ok (meta) (hex) (flash)
 1 =>              cafe

-------------------------------------------------------------------

Here's what the uncommented session output would actually look like:

ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  0000  0000  0000  7f00  0000   Ok (meta) (hex) (flash)
7fc 2ed -  Ok (meta) (hex) (flash)
 1 =>               50f
w!  Ok (meta) (hex) (flash)
2ed x!  Ok (meta) (hex) (flash)
.regs
ITHS_VNZC  H1     W     X     Z    SP    PC
0000_0000  00  050f  02ed  0000  7f00  0000   Ok (meta) (hex) (flash)
+ rx
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  07fc  02ed  0000  07f4  01fc   Ok (meta) (hex) (flash)
@ rx
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  cafe  02ed  07fe  07f4  01fc   Ok (meta) (hex) (flash)
w@  Ok (meta) (hex) (flash)
 1 =>              cafe
.regs
ITHS_VNZC  H1     W     X     Z    SP    PC
1000_0000  00  cafe  02ed  07fe  07f4  01fc   Ok (meta) (hex) (flash)
 1 =>              cafe

The output is cumulative, and it's admittedly terse, as it only contains
exactly what you need.  The important thing to remember is that the
current state of the host->target chat session is always at the bottom
of the output. The registers aren't *always* displayed after you execute
a forth word, but you can always see them with .regs
