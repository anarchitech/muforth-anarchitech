------------ Preliminaries ---------------------------


1) Change line 127 of target/ARM/stm32/atmel-spi-programming-core.mu4 to
read:

    126 ( Default to assembler versions of the bitbanging code.)
    127 -d slow-bits
    128 ld target/ARM/stm32/bitbanged-spi-full-duplex.mu4

2) Make sure you uncomment the correct line for your stm in
   target/ARM/board/stm32f3-discovery.mu4:

   8 ( Uncomment for your board.)
   9 -- ld target/ARM/board/stm32f072b-discovery.mu4
   10 ld target/ARM/board/stm32f3-discovery.mu4


3) Edit target/AVR/build.mu and aim it at the correct device; yes, some
   are using an S08 as a programmer.

   7 ( Using STM32 board.)
   8 -d via-disco    
   9 -- -d via-s08

4) This is an error on daf's part that he'll be patching, but you need
   change target/ARM/v6-m/interact.mu4 line 100 from 'kick' to 'run':

     99 : run      ( pc)  copy-ram  tsp @  t.run ;  ( don't wait for target)
    100 : runwait  ( pc)  run  get-regs ;          ( wait for target)
    

------------ STAGE 1: Setting up the stm32f303 board ------------------

./muforth -d stlink-v2-1 -d spi-prog -f target/AVR/load-stm32-discovery.mu4

muforth/64 (2a1b5c33) 2024-jan-05 07:07 (https://muforth.dev/)
Copyright (c) 2002-2024 David Frech (read the LICENSE for details)

Type 'settings' to see a few of muforth's tweakable behaviours.

(( STM32F3 Discovery board
(( STM32F303xC chip
(( STM32F303xC equates ))
(( ARM Cortex-M4 processor
(( ARM Cortex-M core equates (v6-M and v7-M) ))
(( Core target compiler (chains and token consumers) ))
(( ARM v6-M memory image ))
(( Reading Motorola S-record (S19) files ))
(( Intel hex file support (reading and writing) h* again.  hh* again.
))
(( UF2 file format ))
(( ARM v6-M Thumb2 disassembler ))
(( ARM v7-M Thumb2 disassembler L@ again.  ))
(( ARM v6-M Thumb2 assembler 4# again.  00r again.  i8 again.  sh-imm
again.  ))
(( ARM v7-M Thumb2 assembler ))
(( ARM Cortex-M3/M4 bit banding support ))
(( ARM v6-M meta-compiler (main) ; again.  ))
(( ARM v6-M interaction dumps again.  ))
(( Core flash programming )) )) )) stlink-v2-1 again.
(( ST-LINK debug Yes we have bananas h* again.
(( STM32 flash programming code )) )) ))
(( Atmel SPI flash programming (STM32 core)
(( ARM v6-M Forth kernel (ITC) regs>mask again.  dpop2 again.  dpop3
again.  rpush2 again.  rpop2 again.  ))
(( STM32 Bitbanged SPI (full-duplex) )) ))
ST-LINK/V2-1 JTAG v37
Mass mode => Debug mode
      IX        SP        RP        IP
00000000  20001050  00000000  00000000*
STM32 firmware is running.


-------- STAGE 2: Programming ------------------------

$ ./muforth -d stlink-v2-1 -d spi-prog -f target/AVR/load-chat-serial.mu4

muforth/64 (2a1b5c33) 2024-jan-05 07:07 (https://muforth.dev/)
Copyright (c) 2002-2024 David Frech (read the LICENSE for details)

Type 'settings' to see a few of muforth's tweakable behaviours.

(( AVR meta-compiler (chains) ))
(( AVR device support: atmega328 ))
(( Intel hex file support (reading and writing) ))
(( AVR memory ))
(( AVR assembler ))
(( AVR disassembler .r again.  Rd again.  Rs again.  K8 again.  ))
(( AVR meta-compiler (main) ))
(( AVR interaction .r again.  copy-ram again.  hi again.  du again.  ))
(( ST-LINK debug Yes we have bananas h* again.  ))
(( Atmel SPI flash programming (host) spy again.  ))
(( AVR I2C chat (host) via STM32 >b again.  >w again.  b> again.  w>
again.  cmd again.  ))
(( AVR programming over SPI ))
(( Serial expect/send spy again.  ))
(( AVR serial chat (host) >b again.  b> again.  >w again.  w> again.  ))
(( AVR fuse byte generator Fuse bytes: ff d6 e2  Lock byte: ef ))
(( AVR tasks (simple) ))
(( AVR serial (uart) chat (core)
(( AVR EEPROM reading and writing ))
(( AVR flash self-programming support )) ))
(( AVR heartbeat (software PWM) ))
(( AVR debounced buttons example ))
+prog read-sig -prog
ST-LINK/V2-1 JTAG v37
Debug mode  Ok (meta) (hex) (flash)
 3 =>                1e                95                 f
prog
Warning: You should commit your changes *before* programming the flash
if you want the signature to reference the correct commits!

ST-LINK/V2-1 JTAG v37
Debug mode
Writing fuses
ST-LINK/V2-1 JTAG v37
Debug mode
Writing flash (application)
   page 0
   page 80
   page 100
   page 180
   page 200
Writing flash (bootloader)
   page 7e00
   page 7e80
   page 7f00
   page 7f80
Writing eeprom...................
Writing lock bits Ok (meta) (hex) (flash)
 3 =>                1e                95                 f
verify
ST-LINK/V2-1 JTAG v37
Debug mode
Verifying flash
................................................................................................................................................................................................................................................................
Verifying eeprom ........
Verifying fuses
Verifying lock bits  Ok (meta) (hex) (flash)
 3 =>                1e                95                 f
chat                         <--- Can we chat?
chat Device not configured   <--- No, we'll have to try w/ pl2303

At this point, it failed to chat w/ the PL2303 trying both fast and slow
bits.  This is on OpenBSD, haven't tried this on Linux yet.
