| Copyright (c) [2000,cy], cy=current year Anarchitech Collective; see LICENSE-ANARCHITECH

loading daf's delay code
ld target/8051/delay.mu4

-- Host controlled toggle of led; code compiled to target flash.

      | Useage: led-init  rx
      |         led-on    rx
      |         led-off   rx 
      |         flash-led rx

__meta
hex

label led-init                      | Enable output, config crossbar
              "10 # P1MDOUT mov     
              "40 # XBR2    mov 
              ret ;c

label led-on                        | P1.4 active-low
            P1 .4 cpl 
            ret ;c

label led-off  
             P1 .4 setb ret ;c      | P1.4 high (off)

label flash-led
               led-on    acall
               max-delay acall
               led-off   ajmp
               ret ;c

comment additional-examples

There's more than one way to filet and saute a cat. These
all work with varying degrees of overhead. ;-)

label led-on-setb
                 P1 .4 setb
                 P1 .4 clr 
                 ret ;c

label led-on-orlxrl
                   "10 # P1 orl
                   "10 # P1 xrl 
                   ret ;c

label led-on-acc
                P1 a mov
                "10 # a orl
                a r3 mov    | save a copy of step to r3 
                a P1 mov
                "10 # a xrl
                a r5 mov    | save a copy of step to r5, compare w/ r3
                a P1 mov
                a clr ret   | add 'a clr' to clear parity flag which
                ret ;c      | is otherwise set, cf pg 115 '94 MCS-51
                            | User's Manual (bitsavers.org)

additional-examples

| Event driven example. When switch? executes it waits until the user
| switch tied to P0.2 is pressed and then turns the led on. When the 
| user releases the switch the led shuts off.

label switch-init
                 "04 # P0MDOUT  | configure as output
                 ret ;c

label switch?
             led-init acall
             switch-init acall
             begin
             P0 .2 bset?    | active low, resets as high, check it
             while
             led-off acall  | keep led off while P0 bit 2 is high
             repeat         | repeat until not true (pressed)
             begin          | previous now not true, start second loop
             P0 .2 bclr?    | if P0 bit 2 is clear (0), switch is pressed 
             while
             led-on acall   | ...so turn on the led and keep it on
             repeat        
             led-off acall  | ...until the user releases it
             ret ;c
