( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

loading 8051 chat (host)

hex

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  Idle        - these command bytes are ignored
1b - ff  Idle        - these command bytes are ignored

10  version-addr     - get the address of the version commit
11  set-addr         - set dptr to 16-bit address
12  run
13  get-status

15  read-flash       - read one byte of flash, inc dptr
16  read-ram         - read one byte of ram, inc dptr
17  read-xram        - read one byte of xram, inc dptr

18  write-flash      - erase a page or program one byte,
                     - inc dptr, return status byte
19  write-ram        - write one byte to ram, inc dptr
1a  write-xram       - write one byte to xram, inc dptr
)

: >b   send ;
: b>   recv ;

: >w    >lohi  >b >b ;
: >cmd  ?spkt  >b ;

( "cx.<something>" words are chat *transport* code.
  "c.<something>" words are the high-level chat interface code.)

variable cx-space  ( 0 = flash, 1 = ram, 2 = xram)
: flash-space    cx-space off ;
: ram-space    1 cx-space ! ;

( If flash is current space, get and discard flash programming status.)
: ?flash-status     cx-space @ if ^ then  b> drop ;

: ?writing-ram   cx-space @ if ^ then
   error" can only write from ram or xram region" ;

: ?programming-flash   cx-space @ 0= if ^ then
   error" can only program from flash region" ;

( Choose a space based on host region.)
: choose-space
   h preserve
   dp  flash dup dp = if drop 0 ^ then
         ram     dp = if      1 ^ then  2 ;

: setup-space  choose-space cx-space ! ;


-- ------------------------------------------------------------------------
-- Chat transport interface
-- ------------------------------------------------------------------------

: cx.idle                    0 >cmd ;
: cx.version-addr           10 >cmd ;  ( then read 4 bytes of flash)
: cx.set-addr     ( a)      11 >cmd  >w ;

: cx.run          ( rp)     12 >cmd  >b ;
: cx.get-status   ( - rp)   13 >cmd      b> ;

( XXX change this when we re-flash the chat code, removing command 14.)
: cx.read   ( - b)          15  cx-space @ +  >cmd  b> ;
: cx.write  ( b)            18  cx-space @ +  >cmd  >b  ?flash-status ;


-- ------------------------------------------------------------------------
-- Helper code
-- ------------------------------------------------------------------------

( Send two no-ops, let them transmit, *then* throw away any input bytes.)
: c.resync  cx.idle  cx.idle  drain  flush ;

: c.get-version  ( - n)
   cx.version-addr  flash-space
   cx.read  cx.read  cx.read  cx.read  3210> ;

( Set memory address and target memory space.)
: c.setup-chunk  ( buf a u - #bytes)
   setup-space
   swap cx.set-addr  swap m ! ;

: 4#   # # # # ;

( NOTE: These equates *must* be kept synchronized with the target chat
  code, since we are writing directly to variables in the target's ram.)

( RAM variables.)
08 equ flash-command
09 equ flash-key1
0a equ flash-key2

: set-ram-addr       ( a)   cx.set-addr  ram-space ;
: set-flash-command  ( b)
   \eq flash-command set-ram-addr  cx.write ;

-- ------------------------------------------------------------------------
-- Chat interface
-- ------------------------------------------------------------------------

: c.hello  ( - #chunk)
   #115200 bps  c.resync
   cr ." Chat firmware version "  c.get-version
   radix preserve  hex  sep preserve  -sep   <# 4# 4# #> type
   #128 ;

( Machine stack is upside-down: it grows *up* in memory. So the bottom of
  the stack is at a lower address than the top. Also, the machine stack
  pointer - which we are here calling RP - points *at* the last byte pushed.

  Stack bottom is set by reset code to 0bf.)

( We are not quite there yet. ;-)
: c.run   ( pc rp)   chat-fail ;

( XXX As an experiment, just copy the stack to pad so we can take a look.
  We should ideally store it either in the ram image or in a special
  chat-frame buffer like the S08 code.

  Subtract pad from m to get byte count.)

: c.get-status  ( - rp)
   cx.get-status ( rp)  dup cx.set-addr  ( set addr to RP)  ram-space
   pad m !  dup 0c0 - ( #bytes)  for  cx.read m&  next ;

: c.read    ( buf a u)
   -- cr  ." c.read "  2 nth u.  over u.  dup u.
   c.setup-chunk  for  cx.read  m&  next ;

: c.write       ( buf a u)
   c.setup-chunk  ?writing-ram  for  m* cx.write  next ;

( Write magic numbers into flash key variables.)
: c.flash-begin
   \eq flash-key1 set-ram-addr
   0a5 cx.write  0f1 cx.write ;

: c.flash-end
   \eq flash-command set-ram-addr
   0 cx.write  0 cx.write  0 cx.write ;

: c.erase     ( a)
   03 set-flash-command  ( sets PSEE and PSWE in PSCTL)
   setup-space  ?programming-flash  cx.set-addr  0 cx.write ;

: c.program   ( buf a u)
   01 set-flash-command  ( sets PSWE and clears PSEE in PSCTL)
   c.setup-chunk  ?programming-flash  for  m* cx.write  next ;

: chat   chat-via
   c.hello  c.get-status  c.run  c.read  c.write
   c.flash-begin  c.flash-end  c.erase  c.program ;
