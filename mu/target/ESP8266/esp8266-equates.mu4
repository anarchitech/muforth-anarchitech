( Automagically generated. DO NOT EDIT!
  Generated by https://github.com/nimblemachines/kinetis-chip-equates/
  from CMSIS-SVD source file https://raw.githubusercontent.com/anarchitech/muforth-anarchitech/master/mu/target/ESP8266/svd/esp8266/esp8266.svd)

loading ESP8266 equates

sealed .equates.    ( chip equates and other constants for target)

( First, a few defining words, which we'll use to load the "equates".)
: equ     ( offset)  current preserve  .equates. definitions  constant ;
: vector  ( offset)  equ ;
: |  \ -- ;  ( | ignores the bit-fields that follow each register name)
: aka   .equates. chain' execute ;  ( for making synonyms)

hex

( Register addresses)

( DPORT)
3ff0_0014 equ DPORT_DPORT_CTL         | DPORT_CTL
3ff0_0004 equ DPORT_EDGE_INT_ENABLE   | EDGE_INT_ENABLE

( EFUSE)
3ff0_0050 equ EFUSE_EFUSE_DATA0   | EFUSE_DATA0
3ff0_0054 equ EFUSE_EFUSE_DATA1   | EFUSE_DATA1
3ff0_0058 equ EFUSE_EFUSE_DATA2   | EFUSE_DATA2
3ff0_005c equ EFUSE_EFUSE_DATA3   | EFUSE_DATA3

( UART0)
6000_0000 equ UART0_UART_FIFO        | UART FIFO,length 128
6000_0010 equ UART0_UART_INT_CLR     | UART INTERRUPT CLEAR REGISTER
6000_0014 equ UART0_UART_CLKDIV      | UART CLK DIV REGISTER
6000_0018 equ UART0_UART_AUTOBAUD    | UART BAUDRATE DETECT REGISTER
6000_001c equ UART0_UART_STATUS      | UART STATUS REGISTER
6000_0020 equ UART0_UART_CONF0       | UART CONFIG0(UART0 and UART1)
6000_0024 equ UART0_UART_CONF1       | Set this bit to enable rx time-out function
6000_0028 equ UART0_UART_LOWPULSE    | UART_LOWPULSE
6000_002c equ UART0_UART_HIGHPULSE   | UART_HIGHPULSE
6000_0030 equ UART0_UART_RXD_CNT     | UART_RXD_CNT
6000_0004 equ UART0_UART_INT_RAW     | UART INTERRUPT RAW STATE
6000_0078 equ UART0_UART_DATE        | UART HW INFO
6000_007c equ UART0_UART_ID          | UART_ID
6000_0008 equ UART0_UART_INT_ST      | UART INTERRUPT STATEREGISTERUART_INT_RAWandUART_INT_ENA
6000_000c equ UART0_UART_INT_ENA     | UART INTERRUPT ENABLE REGISTER

( SPI1)
6000_0100 equ SPI1_SPI_CMD         | In the master mode, it is the start bit of a single operation. Self-clear by hardware
6000_0110 equ SPI1_SPI_RD_STATUS   | In the slave mode, this register are the status register for the master to read out.
6000_0114 equ SPI1_SPI_CTRL2       | spi_cs signal is delayed by 80MHz clock cycles
6000_0118 equ SPI1_SPI_CLOCK       | In the master mode, 1: spi_clk is eqaul to 80MHz, 0: spi_clk is divided from 80 MHz clock.
6000_011c equ SPI1_SPI_USER        | This bit enable the "command" phase of an operation.
6000_0120 equ SPI1_SPI_USER1       | The length in bits of "address" phase. The register value shall be (bit_num-1)
6000_0124 equ SPI1_SPI_USER2       | The length in bits of "command" phase. The register value shall be (bit_num-1)
6000_0128 equ SPI1_SPI_WR_STATUS   | In the slave mode, this register are the status register for the master to write into.
6000_012c equ SPI1_SPI_PIN         | 1: disable CS2; 0: spi_cs signal is from/to CS2 pin
6000_0130 equ SPI1_SPI_SLAVE       | It is the synchronous reset signal of the module. This bit is self-cleared by hardware.
6000_0134 equ SPI1_SPI_SLAVE1      | In the slave mode, it is the length in bits for "write-status" and "read-status" operations. The register valueshall be (bit_num-1)
6000_0138 equ SPI1_SPI_SLAVE2      | In the slave mode, it is the length in spi_clk cycles "dummy" phase for "write-buffer" operations. The registervalue shall be (cycle_num-1)
6000_013c equ SPI1_SPI_SLAVE3      | In slave mode, it is the value of "write-status" command
6000_0104 equ SPI1_SPI_ADDR        | In the master mode, it is the value of address in "address" phase.
6000_0140 equ SPI1_SPI_W0          | the data inside the buffer of the SPI module, word 0
6000_0144 equ SPI1_SPI_W1          | the data inside the buffer of the SPI module, word 1
6000_0148 equ SPI1_SPI_W2          | the data inside the buffer of the SPI module, word 2
6000_014c equ SPI1_SPI_W3          | the data inside the buffer of the SPI module, word 3
6000_0150 equ SPI1_SPI_W4          | the data inside the buffer of the SPI module, word 4
6000_0154 equ SPI1_SPI_W5          | the data inside the buffer of the SPI module, word 5
6000_0158 equ SPI1_SPI_W6          | the data inside the buffer of the SPI module, word 6
6000_015c equ SPI1_SPI_W7          | the data inside the buffer of the SPI module, word 7
6000_0160 equ SPI1_SPI_W8          | the data inside the buffer of the SPI module, word 8
6000_0164 equ SPI1_SPI_W9          | the data inside the buffer of the SPI module, word 9
6000_0168 equ SPI1_SPI_W10         | the data inside the buffer of the SPI module, word 10
6000_016c equ SPI1_SPI_W11         | the data inside the buffer of the SPI module, word 11
6000_0170 equ SPI1_SPI_W12         | the data inside the buffer of the SPI module, word 12
6000_0174 equ SPI1_SPI_W13         | the data inside the buffer of the SPI module, word 13
6000_0178 equ SPI1_SPI_W14         | the data inside the buffer of the SPI module, word 14
6000_017c equ SPI1_SPI_W15         | the data inside the buffer of the SPI module, word 15
6000_0108 equ SPI1_SPI_CTRL        | SPI_CTRL
6000_01fc equ SPI1_SPI_EXT3        | This register is for two SPI masters to share the same cs, clock and data signals.

( SPI0)
6000_0200 equ SPI0_SPI_CMD         | In the master mode, it is the start bit of a single operation. Self-clear by hardware
6000_0210 equ SPI0_SPI_RD_STATUS   | In the slave mode, this register are the status register for the master to read out.
6000_0214 equ SPI0_SPI_CTRL2       | spi_cs signal is delayed by 80MHz clock cycles
6000_0218 equ SPI0_SPI_CLOCK       | In the master mode, 1: spi_clk is eqaul to 80MHz, 0: spi_clk is divided from 80 MHz clock.
6000_021c equ SPI0_SPI_USER        | This bit enable the "command" phase of an operation.
6000_0220 equ SPI0_SPI_USER1       | The length in bits of "address" phase. The register value shall be (bit_num-1)
6000_0224 equ SPI0_SPI_USER2       | The length in bits of "command" phase. The register value shall be (bit_num-1)
6000_0228 equ SPI0_SPI_WR_STATUS   | In the slave mode, this register are the status register for the master to write into.
6000_022c equ SPI0_SPI_PIN         | 1: disable CS2; 0: spi_cs signal is from/to CS2 pin
6000_0230 equ SPI0_SPI_SLAVE       | It is the synchronous reset signal of the module. This bit is self-cleared by hardware.
6000_0234 equ SPI0_SPI_SLAVE1      | In the slave mode, it is the length in bits for "write-status" and "read-status" operations. The register valueshall be (bit_num-1)
6000_0238 equ SPI0_SPI_SLAVE2      | In the slave mode, it is the length in spi_clk cycles "dummy" phase for "write-buffer" operations. The registervalue shall be (cycle_num-1)
6000_023c equ SPI0_SPI_SLAVE3      | In slave mode, it is the value of "write-status" command
6000_0204 equ SPI0_SPI_ADDR        | In the master mode, it is the value of address in "address" phase.
6000_0240 equ SPI0_SPI_W0          | the data inside the buffer of the SPI module, word 0
6000_0244 equ SPI0_SPI_W1          | the data inside the buffer of the SPI module, word 1
6000_0248 equ SPI0_SPI_W2          | the data inside the buffer of the SPI module, word 2
6000_024c equ SPI0_SPI_W3          | the data inside the buffer of the SPI module, word 3
6000_0250 equ SPI0_SPI_W4          | the data inside the buffer of the SPI module, word 4
6000_0254 equ SPI0_SPI_W5          | the data inside the buffer of the SPI module, word 5
6000_0258 equ SPI0_SPI_W6          | the data inside the buffer of the SPI module, word 6
6000_025c equ SPI0_SPI_W7          | the data inside the buffer of the SPI module, word 7
6000_0260 equ SPI0_SPI_W8          | the data inside the buffer of the SPI module, word 8
6000_0264 equ SPI0_SPI_W9          | the data inside the buffer of the SPI module, word 9
6000_0268 equ SPI0_SPI_W10         | the data inside the buffer of the SPI module, word 10
6000_026c equ SPI0_SPI_W11         | the data inside the buffer of the SPI module, word 11
6000_0270 equ SPI0_SPI_W12         | the data inside the buffer of the SPI module, word 12
6000_0274 equ SPI0_SPI_W13         | the data inside the buffer of the SPI module, word 13
6000_0278 equ SPI0_SPI_W14         | the data inside the buffer of the SPI module, word 14
6000_027c equ SPI0_SPI_W15         | the data inside the buffer of the SPI module, word 15
6000_0208 equ SPI0_SPI_CTRL        | SPI_CTRL
6000_02fc equ SPI0_SPI_EXT3        | This register is for two SPI masters to share the same cs, clock and data signals.

( GPIO)
6000_0300 equ GPIO_GPIO_OUT               | BT-Coexist Selection register
6000_0310 equ GPIO_GPIO_ENABLE_W1TS       | GPIO_ENABLE_W1TS
6000_0314 equ GPIO_GPIO_ENABLE_W1TC       | GPIO_ENABLE_W1TC
6000_0318 equ GPIO_GPIO_IN                | The values of the strapping pins.
6000_031c equ GPIO_GPIO_STATUS            | GPIO_STATUS
6000_0320 equ GPIO_GPIO_STATUS_W1TS       | GPIO_STATUS_W1TS
6000_0324 equ GPIO_GPIO_STATUS_W1TC       | GPIO_STATUS_W1TC
6000_0328 equ GPIO_GPIO_PIN0              | GPIO_PIN0
6000_032c equ GPIO_GPIO_PIN1              | GPIO_PIN1
6000_0330 equ GPIO_GPIO_PIN2              | GPIO_PIN2
6000_0334 equ GPIO_GPIO_PIN3              | GPIO_PIN3
6000_0338 equ GPIO_GPIO_PIN4              | GPIO_PIN4
6000_033c equ GPIO_GPIO_PIN5              | GPIO_PIN5
6000_0304 equ GPIO_GPIO_OUT_W1TS          | GPIO_OUT_W1TS
6000_0340 equ GPIO_GPIO_PIN6              | GPIO_PIN6
6000_0344 equ GPIO_GPIO_PIN7              | GPIO_PIN7
6000_0348 equ GPIO_GPIO_PIN8              | GPIO_PIN8
6000_034c equ GPIO_GPIO_PIN9              | GPIO_PIN9
6000_0350 equ GPIO_GPIO_PIN10             | GPIO_PIN10
6000_0354 equ GPIO_GPIO_PIN11             | GPIO_PIN11
6000_0358 equ GPIO_GPIO_PIN12             | GPIO_PIN12
6000_035c equ GPIO_GPIO_PIN13             | GPIO_PIN13
6000_0360 equ GPIO_GPIO_PIN14             | GPIO_PIN14
6000_0364 equ GPIO_GPIO_PIN15             | GPIO_PIN15
6000_0368 equ GPIO_GPIO_SIGMA_DELTA       | GPIO_SIGMA_DELTA
6000_036c equ GPIO_GPIO_RTC_CALIB_SYNC    | Positvie edge of this bit will trigger the RTC-clock-calibration process.
6000_0370 equ GPIO_GPIO_RTC_CALIB_VALUE   | 0: during RTC-clock-calibration; 1: RTC-clock-calibration is done
6000_0308 equ GPIO_GPIO_OUT_W1TC          | GPIO_OUT_W1TC
6000_030c equ GPIO_GPIO_ENABLE            | GPIO_ENABLE

( TIMER)
6000_0600 equ TIMER_FRC1_LOAD    | the load value into the counter
6000_0620 equ TIMER_FRC2_LOAD    | the load value into the counter
6000_0624 equ TIMER_FRC2_COUNT   | the current value of the counter. It is a increasingcounter.
6000_0628 equ TIMER_FRC2_CTRL    | FRC2_CTRL
6000_062c equ TIMER_FRC2_INT     | FRC2_INT
6000_0630 equ TIMER_FRC2_ALARM   | the alarm value for the counter
6000_0604 equ TIMER_FRC1_COUNT   | the current value of the counter. It is a decreasingcounter.
6000_0608 equ TIMER_FRC1_CTRL    | FRC1_CTRL
6000_060c equ TIMER_FRC1_INT     | FRC1_INT

( RTC)
6000_0714 equ RTC_RTC_STATE1   | RTC_STATE1
6000_0730 equ RTC_RTC_STORE0   | RTC_STORE0

( IO_MUX)
6000_0800 equ IO_MUX_IO_MUX_CONF       | IO_MUX_CONF
6000_0810 equ IO_MUX_IO_MUX_MTDO       | IO_MUX_MTDO
6000_0814 equ IO_MUX_IO_MUX_U0RXD      | IO_MUX_U0RXD
6000_0818 equ IO_MUX_IO_MUX_U0TXD      | IO_MUX_U0TXD
6000_081c equ IO_MUX_IO_MUX_SD_CLK     | IO_MUX_SD_CLK
6000_0820 equ IO_MUX_IO_MUX_SD_DATA0   | IO_MUX_SD_DATA0
6000_0824 equ IO_MUX_IO_MUX_SD_DATA1   | IO_MUX_SD_DATA1
6000_0828 equ IO_MUX_IO_MUX_SD_DATA2   | IO_MUX_SD_DATA2
6000_082c equ IO_MUX_IO_MUX_SD_DATA3   | IO_MUX_SD_DATA3
6000_0830 equ IO_MUX_IO_MUX_SD_CMD     | IO_MUX_SD_CMD
6000_0834 equ IO_MUX_IO_MUX_GPIO0      | IO_MUX_GPIO0
6000_0838 equ IO_MUX_IO_MUX_GPIO2      | IO_MUX_GPIO2
6000_083c equ IO_MUX_IO_MUX_GPIO4      | IO_MUX_GPIO4
6000_0804 equ IO_MUX_IO_MUX_MTDI       | IO_MUX_MTDI
6000_0840 equ IO_MUX_IO_MUX_GPIO5      | IO_MUX_GPIO5
6000_0808 equ IO_MUX_IO_MUX_MTCK       | IO_MUX_MTCK
6000_080c equ IO_MUX_IO_MUX_MTMS       | IO_MUX_MTMS

( WDT)
6000_0900 equ WDT_WDT_CTL     | WDT_CTL
6000_0914 equ WDT_WDT_RST     | WDT_RST
6000_0904 equ WDT_WDT_OP      | WDT_OP
6000_0908 equ WDT_WDT_OP_ND   | WDT_OP_ND

( SLC)
6000_0b00 equ SLC_SLC_CONF0                 | SLC_CONF0
6000_0b10 equ SLC_SLC_INT_CLR               | SLC_INT_CLR
6000_0b14 equ SLC_SLC_RX_STATUS             | SLC_RX_STATUS
6000_0b18 equ SLC_SLC_RX_FIFO_PUSH          | SLC_RX_FIFO_PUSH
6000_0b1c equ SLC_SLC_TX_STATUS             | SLC_TX_STATUS
6000_0b20 equ SLC_SLC_TX_FIFO_POP           | SLC_TX_FIFO_POP
6000_0b24 equ SLC_SLC_RX_LINK               | SLC_RX_LINK
6000_0b28 equ SLC_SLC_TX_LINK               | SLC_TX_LINK
6000_0b2c equ SLC_SLC_INTVEC_TOHOST         | SLC_INTVEC_TOHOST
6000_0b30 equ SLC_SLC_TOKEN0                | SLC_TOKEN0
6000_0b34 equ SLC_SLC_TOKEN1                | SLC_TOKEN1
6000_0b38 equ SLC_SLC_CONF1                 | SLC_CONF1
6000_0b3c equ SLC_SLC_STATE0                | SLC_STATE0
6000_0b04 equ SLC_SLC_INT_RAW               | SLC_INT_RAW
6000_0b40 equ SLC_SLC_STATE1                | SLC_STATE1
6000_0b44 equ SLC_SLC_BRIDGE_CONF           | SLC_BRIDGE_CONF
6000_0b48 equ SLC_SLC_RX_EOF_DES_ADDR       | SLC_RX_EOF_DES_ADDR
6000_0b4c equ SLC_SLC_TX_EOF_DES_ADDR       | SLC_TX_EOF_DES_ADDR
6000_0b50 equ SLC_SLC_RX_EOF_BFR_DES_ADDR   | SLC_RX_EOF_BFR_DES_ADDR
6000_0b54 equ SLC_SLC_AHB_TEST              | SLC_AHB_TEST
6000_0b58 equ SLC_SLC_SDIO_ST               | SLC_SDIO_ST
6000_0b5c equ SLC_SLC_RX_DSCR_CONF          | SLC_RX_DSCR_CONF
6000_0b60 equ SLC_SLC_TXLINK_DSCR           | SLC_TXLINK_DSCR
6000_0b64 equ SLC_SLC_TXLINK_DSCR_BF0       | SLC_TXLINK_DSCR_BF0
6000_0b68 equ SLC_SLC_TXLINK_DSCR_BF1       | SLC_TXLINK_DSCR_BF1
6000_0b6c equ SLC_SLC_RXLINK_DSCR           | SLC_RXLINK_DSCR
6000_0b70 equ SLC_SLC_RXLINK_DSCR_BF0       | SLC_RXLINK_DSCR_BF0
6000_0b74 equ SLC_SLC_RXLINK_DSCR_BF1       | SLC_RXLINK_DSCR_BF1
6000_0b78 equ SLC_SLC_DATE                  | SLC_DATE
6000_0b7c equ SLC_SLC_ID                    | SLC_ID
6000_0b08 equ SLC_SLC_INT_STATUS            | SLC_INT_STATUS
6000_0b0c equ SLC_SLC_INT_ENA               | SLC_INT_ENA

( I2S)
6000_0e00 equ I2S_I2STXFIFO            | I2STXFIFO
6000_0e10 equ I2S_I2SINT_ST            | I2SINT_ST
6000_0e14 equ I2S_I2SINT_ENA           | I2SINT_ENA
6000_0e18 equ I2S_I2SINT_CLR           | I2SINT_CLR
6000_0e1c equ I2S_I2STIMING            | I2STIMING
6000_0e20 equ I2S_I2S_FIFO_CONF        | I2S_FIFO_CONF
6000_0e24 equ I2S_I2SRXEOF_NUM         | I2SRXEOF_NUM
6000_0e28 equ I2S_I2SCONF_SIGLE_DATA   | I2SCONF_SIGLE_DATA
6000_0e04 equ I2S_I2SRXFIFO            | I2SRXFIFO
6000_0e08 equ I2S_I2SCONF              | I2SCONF
6000_0e0c equ I2S_I2SINT_RAW           | I2SINT_RAW

( UART1)
6000_0f00 equ UART1_UART_FIFO        | UART FIFO,length 128
6000_0f10 equ UART1_UART_INT_CLR     | UART INTERRUPT CLEAR REGISTER
6000_0f14 equ UART1_UART_CLKDIV      | UART CLK DIV REGISTER
6000_0f18 equ UART1_UART_AUTOBAUD    | UART BAUDRATE DETECT REGISTER
6000_0f1c equ UART1_UART_STATUS      | UART STATUS REGISTER
6000_0f20 equ UART1_UART_CONF0       | UART CONFIG0(UART0 and UART1)
6000_0f24 equ UART1_UART_CONF1       | Set this bit to enable rx time-out function
6000_0f28 equ UART1_UART_LOWPULSE    | UART_LOWPULSE
6000_0f2c equ UART1_UART_HIGHPULSE   | UART_HIGHPULSE
6000_0f30 equ UART1_UART_RXD_CNT     | UART_RXD_CNT
6000_0f04 equ UART1_UART_INT_RAW     | UART INTERRUPT RAW STATE
6000_0f78 equ UART1_UART_DATE        | UART HW INFO
6000_0f7c equ UART1_UART_ID          | UART_ID
6000_0f08 equ UART1_UART_INT_ST      | UART INTERRUPT STATEREGISTERUART_INT_RAWandUART_INT_ENA
6000_0f0c equ UART1_UART_INT_ENA     | UART INTERRUPT ENABLE REGISTER
